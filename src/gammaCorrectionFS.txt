#version 330 core

#define NUM_MAX_PLIGHTS 4
#define NUM_MAX_SLIGHTS 4

struct Material {
	sampler2D diffuse;
    sampler2D specular;
    float shininess;
};  

struct PLight {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant, linear, quadratic;

	vec3 color;
};

struct DLight {
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 color;
};

struct SLight {
	vec3 position;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float minAperture, maxAperture;
	float constant, linear, quadratic;

	vec3 color;
};

in vec3 fragPos;  
in vec3 normalVec;  
in vec2 texCoords;
  
out vec4 FragmentColor;
  
uniform int n;
uniform vec3 viewPos;
uniform Material material;
uniform DLight dlight;
uniform PLight plight[NUM_MAX_PLIGHTS];
uniform SLight slight[NUM_MAX_SLIGHTS];

uniform float gammaValue;
uniform bool gammaOn;

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 viewPosition);
vec3 PointLight(PLight light, vec3 Normal, vec3 viewPosition);
vec3 SpotLight(SLight light, vec3 Normal, vec3 viewPosition);

void main(){
	vec3 color; //= texture(material.diffuse, texCoords).rgb;
	vec3 totalLight;
	vec3 pLight1 = PointLight(plight[0], normalVec, viewPos), pLight2 = PointLight(plight[1], normalVec, viewPos);
	vec3 sLight1 = SpotLight(slight[0], normalVec, viewPos), sLight2 = SpotLight(slight[1], normalVec, viewPos);
	vec3 dLight1 = DirectionalLight(dlight, normalVec, viewPos);
	//Output color
	totalLight = (pLight1 + pLight2 + sLight1 + sLight2 + dLight1);
	color = totalLight;

	if(gammaOn){
		color = pow(color, vec3(1.0/gammaValue));
	}
		
	FragmentColor = vec4(color, 1.0f);
	
} 

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 viewPosition){
	return vec3(0.0);
}

vec3 PointLight(PLight light, vec3 Normal, vec3 viewPosition){
	float distance = length(light.position - fragPos);
	float attenuation = 1/(distance*distance);
	vec3 normal = normalize(Normal);

	//Ambiental
	vec3 ambiental; //= light.ambient *  vec3(texture(material.diffuse, texCoords)).rgb * light.color;

	//Diffuse
	vec3 lightDir = normalize(light.position - fragPos);
	vec3 diffuse = light.diffuse * max(dot(lightDir, normal), 0.0) * light.color * vec3(texture(material.diffuse, texCoords)).rgb;
	
	//Specular
	vec3 viewDirection = normalize(viewPosition - fragPos);
	vec3 reflectDirection = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), n);
	vec3 specular = spec * light.specular * light.color * vec3(texture(material.specular, texCoords)).rgb;

	ambiental *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	return ambiental + diffuse + specular;
}

vec3 SpotLight(SLight light, vec3 Normal, vec3 viewPosition){
	float distance = length(light.position - fragPos);
	float attenuation = 1/distance;
	return vec3(0.0);
}