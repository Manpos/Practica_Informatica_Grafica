#version 330 core

#define NUM_MAX_PLIGHTS 4
#define NUM_MAX_SLIGHTS 4

struct Material {
	sampler2D diffuse;
    sampler2D specular;
    float shininess;
};  

struct PLight {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant, linear, quadratic;

	vec3 color;
};

struct DLight {
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 color;
};

struct SLight {
	vec3 position;
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float minAperture, maxAperture;
	float constant, linear, quadratic;

	vec3 color;
};

in vec3 fragPos;  
in vec3 normalVec;  
in vec2 texCoords;
  
out vec4 FragmentColor;
  
uniform int n;
uniform vec3 viewPos;
uniform Material material;
uniform DLight dlight;
uniform PLight plight[NUM_MAX_PLIGHTS];
uniform SLight slight[NUM_MAX_SLIGHTS];

uniform float gammaValue;
uniform bool gammaOn;
uniform bool SpotLightBool;
uniform bool DirectionLightBool;

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 viewPosition);
vec3 PointLight(PLight light, vec3 Normal, vec3 viewPosition);
vec3 SpotLight(SLight light, vec3 Normal, vec3 viewPosition);

void main(){
	vec3 color;
	vec3 totalLight;
	vec3 pLight1 = PointLight(plight[0], normalVec, viewPos), pLight2 = PointLight(plight[1], normalVec, viewPos), pLight3 = PointLight(plight[2], normalVec, viewPos), pLight4 = PointLight(plight[3], normalVec, viewPos);
	vec3 sLight1 = SpotLight(slight[0], normalVec, viewPos), sLight2 = SpotLight(slight[1], normalVec, viewPos), sLight3 = SpotLight(slight[2], normalVec, viewPos), sLight4 = SpotLight(slight[3], normalVec, viewPos);
	vec3 dLight1 = DirectionalLight(dlight, normalVec, viewPos);

	//Output color
	if(SpotLightBool){
		totalLight = (sLight1 + sLight2 + sLight3 + sLight4);
	}
	else if(DirectionLightBool){
		totalLight = dLight1;
	}
	else
		totalLight = (pLight1 + pLight2 + pLight3 + pLight4);

	color = totalLight;

	if(gammaOn){
		color = pow(color, vec3(1.0/gammaValue));
	}
		
	FragmentColor = vec4(color, 1.0f);
	
} 

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 viewPosition){
	//Ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, texCoords));
  	
    //Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(-light.direction);  
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, texCoords));  
    
    //Specular
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), n);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, texCoords));
            
    return ambient + diffuse + specular;
}

vec3 PointLight(PLight light, vec3 Normal, vec3 viewPosition){
	float distance = length(light.position - fragPos);
	float attenuation = 1/(distance*distance);
	vec3 normal = normalize(Normal);

	//Ambiental
	vec3 ambiental = light.ambient *  vec3(texture(material.diffuse, texCoords)).rgb * light.color;

	//Diffuse
	vec3 lightDir = normalize(light.position - fragPos);
	vec3 diffuse = light.diffuse * max(dot(lightDir, normal), 0.0) * light.color * vec3(texture(material.diffuse, texCoords)).rgb;
	
	//Specular
	vec3 viewDirection = normalize(viewPosition - fragPos);
	vec3 reflectDirection = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), n);
	vec3 specular = spec * light.specular * light.color * vec3(texture(material.specular, texCoords)).rgb;

	ambiental *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	return ambiental + diffuse + specular;
}

vec3 SpotLight(SLight light, vec3 Normal, vec3 viewPosition){

	//Attenuation
	float distance = length(light.position - fragPos);
	float attenuation = 1/distance;

	//Ambient
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, texCoords)).rgb * light.color;
	
	//Diffuse
	vec3 normal = normalize(Normal);
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, texCoords)).rgb * light.color;

	//Specular
	vec3 viewDir = normalize(viewPosition - fragPos);
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), n);
	vec3 specular = light.specular * spec * vec3(texture(material.specular, texCoords)).rgb * light.color;

	//SpotLight
	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon = (light.minAperture - light.maxAperture);
	float intensity = clamp((theta - light.maxAperture) / epsilon, 0.0, 1.0);
	diffuse *= intensity;
	specular *= intensity;

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	if(theta > light.maxAperture){
		return ambient + diffuse + specular;
	}
	else return ambient;
	

}