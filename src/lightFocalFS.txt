#version 330 core

// Input data

in vec3 normalVec;
in vec3 fragPos;

//Object and light color
uniform vec3 objectColor;
uniform vec3 lightColor;

//Ambient light
uniform float ambientalIntensity;
uniform float ambientalConstant;

//Difuse light
uniform vec3 lightPos;
uniform float sourceIntensity;
uniform float difuseReflection;
uniform vec3 lightDirection;
uniform vec3 attConst;

//Specular light
uniform float Ke;
uniform int n;
uniform vec3 viewerPos;

//Focal light parameters
uniform float maxAperture;
uniform float minAperture;

// Ouput data
out vec4 color;

void main() {
	
	//Attenuation factor variables
	vec3 c = attConst;
	float d = length(lightPos - fragPos);
	float attFact = 1 / (c.x + c.y * d + c.z * (d * d));

	//Other variables
	vec3 L = normalize(lightPos - fragPos);
	vec3 N = normalize(normalVec);
	vec3 R = 2 * max(dot(N, L), 0.0) * N - L;
	vec3 V = normalize(viewerPos - fragPos);

	//Light types
	float specular;
	float ambiental;
	float difuse;

	//Soften focal light
	float theta = dot(L, normalize(-lightDirection));
	float epsilon = minAperture - maxAperture;
	float inte = clamp((theta - maxAperture)/epsilon, 0, 1);

	if(theta > maxAperture){

		//Ambiental Light
		ambiental = ambientalIntensity * ambientalConstant;

		//Difuse Light
		difuse = sourceIntensity * difuseReflection * (max(dot(N, L), 0.0));

		//Specular Light
		specular =  sourceIntensity * Ke * pow(dot(V,R), n);

		//Output color
		color = vec4(attFact * (ambiental * lightColor + inte * difuse * lightColor + inte * specular * lightColor) * objectColor, 1.0);

	}

	else{

		//Ambiental Light
		ambiental =  ambientalIntensity * ambientalConstant;

		//Output color
		color = vec4(attFact * (ambiental * lightColor) * objectColor, 1.0);

	}
		
}