#version 330 core

// Input data

in vec3 normalVec;
in vec3 fragPos;

//Object and light color
uniform vec3 objectColor;
uniform vec3 lightColor;

//Ambient light
uniform float ambientalIntensity;
uniform float ambientalConstant;

//Difuse light
uniform vec3 lightPos;
uniform float sourceIntensity;
uniform float difuseReflection;
uniform vec3 attConst;

//Specular light
uniform float Ke;
uniform int n;
uniform vec3 viewerPos;


// Ouput data
out vec4 color;

void main() {

	//Attenuation factor variables
	vec3 c = attConst;
	float d = length(lightPos - fragPos);
	float attFact = 1 / (c.x + c.y * d + c.z * (d * d));
	
	//Other variables
	vec3 L = normalize(lightPos - fragPos);
	vec3 N = normalize(normalVec);
	vec3 R = 2 * dot(N, L) * N - L;
	vec3 V = normalize(viewerPos - fragPos);

	//Ambiental Light
	float ambiental = attFact * ambientalIntensity * ambientalConstant;

	//Difuse Light
	float difuse = attFact * sourceIntensity * difuseReflection * (max(dot(N, L), 0.0));

	//Specular Light
	float specular = attFact * sourceIntensity * Ke * pow(max(dot(V,R), 0.0), n);

	//Output color
	color = vec4((ambiental * lightColor + difuse * lightColor + specular * lightColor) * objectColor, 1.0);
}